#lang planet neil/sicp

(define (make-deque) '(()))
(define (empty-deque? dq)
  (and (null? (front-ptr dq))
       (null? (rear-ptr dq))))
(define (front-deque dq)
  (if (null? (front-ptr dq))
      (error "FRONT-DEQUE called with empty deque" dq)
      (car (front-ptr dq))))
(define (rear-deque dq)
  (if (null? (rear-ptr dq))
      (error "REAR-DEQUE called with empty deque" dq)
      (car (rear-ptr dq))))
(define (front-insert-deque! dq elem)
  (let ((new-node (list elem '())))
    (cond ((empty-deque? dq)
           (set-car! dq new-node)
           (set-cdr! dq new-node))
          (else
           (set-cdr! (cdr new-node) (front-ptr dq))
           (set-car! (cdr (front-ptr dq)) new-node)
           (set-car! dq new-node)))))
(define (rear-insert-deque! dq elem)
  (let ((new-node (list elem '())))
    (cond ((empty-deque? dq)
           (set-car! dq new-node)
           (set-cdr! dq new-node))
          (else
           (set-car! (cdr new-node) (rear-ptr dq))
           (set-cdr! (cdr (rear-ptr dq)) new-node)
           (set-cdr! dq new-node)))))
(define (front-delete-deque! dq)
  (cond ((empty-deque? dq)
         (error "FRONT-DELETE-DEQUE! called with empty deque" dq))
        ((null? (cddr (front-ptr dq)))
         (set-car! dq (cddr (front-ptr dq)))
         (set-cdr! dq (front-ptr dq)))
        (else
         (set-car! dq (cddr (front-ptr dq)))
         (set-car! (cdr (front-ptr dq)) '()))))
(define (rear-delete-deque! dq)
  (cond ((empty-deque? dq)
         (error "REAR-DELETE-DEQUE! called with empty deque" dq))
        ((null? (cadr (rear-ptr dq)))
         (set-cdr! dq (cadr (rear-ptr dq)))
         (set-car! dq (rear-ptr dq)))
        (else
         (set-cdr! dq (cadr (rear-ptr dq)))
         (set-cdr! (cdr (rear-ptr dq)) '()))))
(define (front-ptr dq) (car dq))
(define (rear-ptr dq) (cdr dq))
